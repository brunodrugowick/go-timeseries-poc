// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createMeasurement = `-- name: CreateMeasurement :one
INSERT INTO measurement (
  created_date, heart_rate, high, low, username
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING uuid, created_date, heart_rate, high, low, username
`

type CreateMeasurementParams struct {
	CreatedDate sql.NullInt64
	HeartRate   sql.NullInt32
	High        sql.NullInt32
	Low         sql.NullInt32
	Username    sql.NullString
}

func (q *Queries) CreateMeasurement(ctx context.Context, arg CreateMeasurementParams) (Measurement, error) {
	row := q.db.QueryRowContext(ctx, createMeasurement,
		arg.CreatedDate,
		arg.HeartRate,
		arg.High,
		arg.Low,
		arg.Username,
	)
	var i Measurement
	err := row.Scan(
		&i.Uuid,
		&i.CreatedDate,
		&i.HeartRate,
		&i.High,
		&i.Low,
		&i.Username,
	)
	return i, err
}

const deleteMeasurement = `-- name: DeleteMeasurement :exec
DELETE FROM measurement
WHERE uuid = $1
`

func (q *Queries) DeleteMeasurement(ctx context.Context, uuid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMeasurement, uuid)
	return err
}

const getMeasurement = `-- name: GetMeasurement :one
SELECT uuid, created_date, heart_rate, high, low, username FROM measurement
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetMeasurement(ctx context.Context, uuid uuid.UUID) (Measurement, error) {
	row := q.db.QueryRowContext(ctx, getMeasurement, uuid)
	var i Measurement
	err := row.Scan(
		&i.Uuid,
		&i.CreatedDate,
		&i.HeartRate,
		&i.High,
		&i.Low,
		&i.Username,
	)
	return i, err
}

const listMeasurements = `-- name: ListMeasurements :many
SELECT uuid, created_date, heart_rate, high, low, username FROM measurement
ORDER BY created_date
`

func (q *Queries) ListMeasurements(ctx context.Context) ([]Measurement, error) {
	rows, err := q.db.QueryContext(ctx, listMeasurements)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Measurement
	for rows.Next() {
		var i Measurement
		if err := rows.Scan(
			&i.Uuid,
			&i.CreatedDate,
			&i.HeartRate,
			&i.High,
			&i.Low,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
